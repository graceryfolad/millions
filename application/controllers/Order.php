<?php

/*
 * Generated by CRUDigniter v3.0 Beta 
 * www.crudigniter.com
 */

class Order extends MY_Controller {

    public $userdetails;

    function __construct() {
        parent::__construct();
        $this->load->model('Order_model');
        $this->load->model('Service_model');
        $this->load->model('Wallet_model');
        $this->load->model('Pack_commission_model');
        $this->load->library('airvend');
        $this->load->helper('allhelpers');
        $this->load->library('mailer');

        $this->userdetails = $this->GetDetails();

        $this->data['balance'] = $this->Wallet_model->Balance($this->userdetails['id']);

        $this->data['uinfo'] = $this->userdetails;
    }

    /*
     * Listing of orders
     */

    function index() {
        $data['orders'] = $this->Order_model->get_all_orders();

        $data['_view'] = 'order/index';
        $this->load->view('layouts/main', $data);
    }

    /*
     * Adding a new order
     */

    function add() {
//        ini_set("date.timezone", "Africa/Lagos");

        
        if (isset($_POST) && count($_POST) > 0) {
//            check wallet balance
            $balance = $this->Wallet_model->balance($this->userdetails['id']);
            if (array_key_exists('smtype', $_POST)) {
                $smtype = $this->input->post('smtype');
            }


            if (is_numeric($this->input->post('amount'))) {
                $params = array(
                    'ser_code' => $this->input->post('network'),
                    'us_id' => $this->userdetails['id'],
                    'amount' => $this->input->post('amount'),
//				'ord_comm' => $this->input->post('ord_comm'),
                    'ord_for' => $this->input->post('order_for'),
                    'ord_status' => ORDER_FAILED,
                    'ord_date' => date('Y-m-d H:i:s'),
                    'ord_yr' => date('Y'),
                    'ord_mn' => date('m'),
                    'ord_dy' => date('d'),
//				'ord_others' => $this->input->post('ord_others'),
                    'cat_id' => $this->input->post('cat'),
                );
            } else {
                $amt = $this->input->post('amount');
                $xx = explode(",", $amt);
                $typecode = $xx[1];
                $amount = $xx[0];

                $params = array(
                    'ser_code' => $this->input->post('network'),
                    'us_id' => $this->userdetails['id'],
                    'amount' => $amount,
//				'ord_comm' => $this->input->post('ord_comm'),
                    'ord_for' => $this->input->post('order_for'),
                    'ord_status' => ORDER_FAILED,
                    'ord_date' => date('Y-m-d H:i:s'),
                    'ord_yr' => date('Y'),
                    'ord_mn' => date('m'),
                    'ord_dy' => date('d'),
//				'ord_others' => $this->input->post('ord_others'),
                    'cat_id' => $this->input->post('cat'),
                );
            }

            if (!isset($_SESSION['orderid'])) {

                if ($balance >= $params['amount']) {

                    $serv_d = $this->Service_model->get_service($params['ser_code']);

                    if ($serv_d['ser_status'] == 1) {
                        $order_id = $this->Order_model->add_order($params);

                        $this->session->set_userdata('orderid', $order_id);
//                get service details

                        $airv = FALSE;
                        switch ($params['cat_id']) {
                            case 1:
                                $airv = $this->airvend->CallVTU($params['amount'], $serv_d['api_code'], API_EMAIL, API_PASSWORD, $order_id, $params['ord_for']);
                                break;
                            case 2:
                                $custnum = $this->input->post('custnum');
                                $airv = $this->airvend->CallTV($params['amount'], strtolower($serv_d['ser_name']), API_EMAIL, API_PASSWORD, $order_id, $custnum, 1);
                                break;
                            case 3:
//                         $custnum = $this->input->post('custnum');
                                $airv = $this->airvend->CallElectricity($params['amount'], $serv_d['api_code'], API_EMAIL, API_PASSWORD, $order_id, $params['ord_for']);

                                break;
                            case 4:
                                $airv = $this->airvend->CallData((int) $params['amount'], $serv_d['api_code'], API_EMAIL, API_PASSWORD, $order_id, $params['ord_for']);
                                break;

                            case 5:

                                $prd = $this->airvend->WAECPRODUCTS(API_EMAIL, API_PASSWORD);


                                if (is_array($prd) && array_key_exists('amount', $prd)) {
                                    $amount = $prd['amount'];
                                    $total = $params['ord_for'] * $amount;
                                    $airv = $this->airvend->CallWAEC(API_EMAIL, API_PASSWORD, $order_id, $params['ord_for'], $total);
                                }
                                break;

                            case 7:

                                if ($smtype == 1) {
                                    $airv = $this->airvend->CallSmileBundle(API_EMAIL, API_PASSWORD, $order_id, $params['amount'], $params['ord_for'], $typecode);
                                } elseif ($smtype == 2) {
                                    $airv = $this->airvend->CallSmileRecharge(API_EMAIL, API_PASSWORD, $order_id, $params['amount'], $params['ord_for']);
                                }

                                break;
                        }

//               


                        if (is_array($airv)) {
//                    update the ordate status
//                    calculate vendor commission
                            if (array_key_exists('status', $airv) && $airv['status'] == 0) {
                                $pack_comm = $this->Pack_commission_model->get_pack_commission_service($params['ser_code'], $this->userdetails['pack']);
                                $comm_earned = 0;

                                if ($pack_comm['is_percent'] == 1) {

                                    $comm_earned = ($pack_comm['comm_per'] / 100) * $params['amount'];
                                } elseif ($pack_comm['is_percent'] == 2) {
                                    $comm_earned = 0;
                                }
//                    $comm_earned = ($pack_comm['comm_per'] / 100) * $params['amount'];
//                    update the wallet
//                    
                                $bal = $balance - $params['amount'];
                                $newbal = $bal + $comm_earned;
                                if (is_array($airv)) {

                                    $this->Order_model->update_order($order_id, array('ord_status' => ORDER_SUCCESS, 'ord_comm' => $comm_earned, 'ord_others' => $airv['response']));
                                }
//                    } else {
//                        $this->Order_model->update_order($order_id, array('ord_status' => ORDER_SUCCESS, 'ord_comm' => $comm_earned, 'ord_others' => $airv['response']));
//                    }



                                $this->Wallet_model->update_wallet($this->userdetails['id'], array('balance' => $newbal));

                                $email = "Dear {$this->userdetails['name']}, \n
                        Please find details of your transaction below. \n
                        Destination : {$params['ord_for']} \n
                        Service : {$serv_d['ser_name']} \n
                        Amount : N{$params['amount']} \n
                        Commission : N{$comm_earned} \n
                        Initial Balance: N{$balance} \n
                        Current Balance: N{$newbal} \n";

                                $this->mailer->Order($this->userdetails['email'], $email);
                                redirect("order/finish/{$order_id}");
                            } else {
                                redirect("order/finish/{$order_id}");
                            }
                        } else {
                            redirect("order/finish/{$order_id}");
                        }
                    } else {
//     order error
//     1 = insufficient balance
//     2 = network error
                        redirect('order/finish/2');
                    }
                } else {
                     redirect("order/finish/0");
                }
            }
            else{
                $ord = $_SESSION['orderid'];
                redirect("order/finish/{$ord}");
            }
//            redirect('order/index');
        } else {
            redirect('order/index/');
        }
    }

    /*
     * Editing a order
     */

    function edit($ord_id) {
        // check if the order exists before trying to edit it
        $data['order'] = $this->Order_model->get_order($ord_id);

        if (isset($data['order']['ord_id'])) {
            if (isset($_POST) && count($_POST) > 0) {
                $params = array(
                    'ser_code' => $this->input->post('ser_code'),
                    'us_id' => $this->input->post('us_id'),
                    'amount' => $this->input->post('amount'),
                    'ord_comm' => $this->input->post('ord_comm'),
                    'ord_for' => $this->input->post('ord_for'),
                    'ord_status' => $this->input->post('ord_status'),
                    'ord_date' => $this->input->post('ord_date'),
                    'ord_yr' => $this->input->post('ord_yr'),
                    'ord_mn' => $this->input->post('ord_mn'),
                    'ord_dy' => $this->input->post('ord_dy'),
                    'ord_others' => $this->input->post('ord_others'),
                    'cat_id' => $this->input->post('cat_id'),
                );

                $this->Order_model->update_order($ord_id, $params);
                redirect('order/index');
            } else {
                $data['_view'] = 'order/edit';
                $this->load->view('layouts/main', $data);
            }
        } else
            show_error('The order you are trying to edit does not exist.');
    }

    public function finish($id) {
        if ($id > 10) {
//            get the status of this order
            $status = $this->Order_model->get_order_details($id);
            if (count($status) > 0) {
                if (array_key_exists('ord_others', $status)) {
//                    $xml = simplexml_load_string($status);
                    $stx = $status['ord_others'];
                    $cat = $status['cat_id'];
                    try {
                        if ($cat == 3 || $cat == 5) {
                            $xml = simplexml_load_string($stx);
                            $json = json_encode($xml);

                            $obj = json_decode($json);
                        }

                        if (isset($obj) && is_object($obj)) {

                            if (property_exists($obj, 'vendData')) {
                                $vdata = $obj->vendData;

                                if (property_exists($vdata, 'creditToken')) {
                                    $token = $obj->vendData->creditToken;
                                    $this->data['ikjpre'] = $token;
                                } elseif (property_exists($vdata, 'pins')) {
                                    $pins = $obj->vendData->pins;
                                    $arr = array();
                                    foreach ($pins as $pin) {
                                        $arr[] = array(
                                            'sn' => $pin->serialNumber,
                                            'pn' => $pin->pinCode,
                                        );
                                    }

                                    $this->data['waecpins'] = $arr;
                                }
                            }
                        }
                    } catch (Exception $ex) {
                        
                    }
                }

                $this->data['status'] = $status;
            }
        } else {
            switch ($id){
                case 0:
                    $this->data['fail'] = "Insufficient fund";
                    break;
                case 1:
                    $this->data['fail'] = "Insufficient fund";
                    break;
                case 2:
                    $this->data['fail'] = "Service Temporarily Suspended";
                    break;
                
            }
            
        }

        $this->body = "vendor/ordfinish";

        $this->session->unset_userdata('orderid');
        $this->userlayout();
    }

    public function Verify() {
        if (array_key_exists('SubmitVerify', $_POST)) {
            $net = $this->input->post('network');
            $card = $this->input->post('order_for');
            $amt = $this->input->post('amount');

            $cat = $this->input->post('cat');
//            call the service
            $serv_d = $this->Service_model->get_service($net);
            $verify = "";
            $others = array('amount' => $amt, 'cat' => $cat, 'scode' => $serv_d['ser_code'], 'card' => $card, 'service' => $serv_d['ser_name']);
            switch ($cat) {
                case 2:
                    $verify = $this->airvend->VerifyTV(strtolower($serv_d['ser_name']), API_EMAIL, API_PASSWORD, $card);

                    if (is_array($verify) && count($verify) > 1) {
                        $results = array_merge($others, $verify);
                        $this->data['verify'] = $results;
                    }
                    $this->body = 'vendor/verify';

                    $this->userlayout();
                    break;
                case 3:
                    $verify = $this->airvend->VerifyElectricity($serv_d['api_code'], API_EMAIL, API_PASSWORD, $card);
                    if (is_array($verify) && count($verify) > 1) {
                        $results = array_merge($others, $verify);
                        $this->data['el_type'] = $results;

                        $this->data['verify'] = $results;
                    }
                    $vw = $this->load->view('vendor/el_verify', $this->data, TRUE);
                    echo $vw;

                    break;
            }
        }
    }

    public function Transfer() {
        if (isset($_POST) && count($_POST) > 0) {
            $receiver = $this->input->post('transf_to');
            $sender = $this->userdetails['id'];
            $amount = $this->input->post('amount');
        }
    }

}
